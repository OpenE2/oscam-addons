CONTENT
============================================================================
	== 1. SCROLL TO TOP FUNCTION
	== 2. GRAY LAYER FOR SORTABLE CELLS "TD" (Background for sorting cells in readers, readerstats and users)
	== 3. COUNT VISIBLE ROWS in TABLE
	== 4. PAGINATION with "PREVIOUS" and "NEXT" button
	== 5. PAGINATION with SEARCHING
	== 6. Get URL parameters & values with jQuery

1. SCROLL TO TOP FUNCTION

---- HTML
	
		<DIV CLASS="top-footer">
			<A HREF="#" CLASS="link-top">Go to Top</A>
		</DIV>

---- CSS
		/* Basic setting for "Go to top" link */
		.top-footer a.link-top {
			color: #050840;;
			font-weight: bold;
			text-decoration: none;
			margin-top: -9px;
		}
		.top-footer {
			position: absolute;
			bottom: 40px;
			right: 20%;
		}
		.top-footer a.link-top:hover {
			color: #FF9E5F;
		}

		/* Go to top link */
		.envi .top-footer a.link-top {
			color: #FFF;
		}
		.envi .top-footer a.link-top:hover {
			color: #BD0000;
		}

---- JQEURY CODE

		/* -------------- SCROLL TO TOP -------------- */
		$(function() {
			$('a.link-top').click(function () {
				jQuery('body').animate({
					scrollTop: 0
				}, {
					queue: false,
					duration: 1000
				});
				jQuery('html').animate({
					scrollTop: 0
				}, {
					queue: false,
					duration: 1000
				});
				return false
			});
		});

2. GRAY LAYER FOR SORTABLE CELLS "TD" (Background for sorting cells in readers, readerstats and users)

---- CSS		
		/* Background color for TD if TH have class sorting-asc, sorting-desc */
		.envi .readers tr:nth-child(odd) .td-sorting,
		.envi .users tr.offline:nth-child(odd) .td-sorting,
		.envi .statsbalance tr:nth-child(odd) .td-sorting {
			background-color: #E6E6E6;
		}
		.envi .readers tr:nth-child(even) .td-sorting,
		.envi .users tr.offline:nth-child(even) .td-sorting,
		.envi .statsbalance tr:nth-child(even) .td-sorting {
			background-color: #d9d9d9;
		}
		.envi .users tr.connected .td-sorting {
			background-color: #f5f5a4;
		}
		.envi .users tr.online td.td-sorting {
			background-color: #b2f2a2;
		}


---- JQEURY CODE
		
		/* -------------- CLICK FUNCTION FOR TH - gray layer over sorting column -------------- */
		/* I donÂ´t know I this code is OK
		 */
		$("#dataTable th.sortable").click(function () {
			var colIndex = $(this).parent().children().index($(this));

			$('tr').find('td:eq(' + colIndex + ')').addClass('td-sorting');

			if ($("th").hasClass("sorting-asc") || $("th").hasClass("sorting-desc")) {
				// has specialclass 
				$('tr').find('td.td-sorting').removeClass('td-sorting');
				$('tr').find('td:eq(' + colIndex + ')').addClass('td-sorting');
			}
		});


3. COUNT VISIBLE ROWS in TABLE

	/* Count visible rows in table */
	var numOfVisibleRows = $('#dataTable > tbody > tr').filter(function() {
		return $(this).css('display') !== 'none';
	}).length;
	$('#countrows').html('Showing: <SPAN CLASS="rowcount">' + numOfVisibleRows + '</SPAN> of <SPAN CLASS="rowcount">' + rowCount + '</SPAN> entries');

4. PAGINATION with "PREVIOUS" and "NEXT" button

	function Paginate() {
		//How much items per page to show if page is load
			//Check if cookie exists
			if (typeof $.cookie('numPerPage') === 'undefined'){
				//no cookie
				var numPerPage = 15;
				$("#selectionPerPage").val("15");
			} else {
				//have cookie
				var numPerPage = $.cookie("numPerPage"); // Set amount of table rows per 'page' from cookie
				$("#selectionPerPage").val($.cookie("numPerPage"));
			}

	    var currentPage = 0;
	    var $table = $(this);
	    var $tfoot = $(this).find('#pagination');
	    $table.bind('repaginate', function() {
	        $table.find('tbody tr').hide().slice(currentPage * numPerPage, (currentPage + 1) * numPerPage).show();
	    });
	    $table.trigger('repaginate'); //show correct number of rows on first page load
	    var numRows = $table.find('tbody tr').length;
	    var numPages = Math.ceil(numRows / numPerPage);
	    var $pager = $('<DIV CLASS="pager"></DIV>'); // create "pager"
	    var $previous = $('<SPAN CLASS="previous" TITLE="Previous page"><<</SPAN>'); // create "previous" link
	    var $next = $('<SPAN CLASS="next" title="Next page">>></SPAN>'); // create "next" link
	    // If num of pages is > 1
	    for (var page = 0; page < numPages; page++) {
		        $('<SPAN CLASS="page-number"></SPAN>').text(page + 1).bind('click', {
		            newPage: page
		        }, function(event) {
		            currentPage = event.data['newPage'];
		            $table.trigger('repaginate');
		            $(this).addClass('active').siblings().removeClass('active');
		        }).appendTo($pager).addClass('clickable');
		    }
		// If num of pages == 1, hide link "previous" and "next"
		if(numPages == 1){
			$previous.hide();
			$next.hide()
		}
	    $pager.appendTo($tfoot).find('span.page-number:first').addClass('active');
	    $previous.insertBefore('span.page-number:first');
	    $next.insertAfter('span.page-number:last');
		    
	    $next.click(function (e) {
	        $previous.addClass('clickable');
	        $pager.find('.active').next('.page-number.clickable').click();
	    });
	    $previous.click(function (e) {
	        $next.addClass('clickable');
	        $pager.find('.active').prev('.page-number.clickable').click();
	    });
	    $table.on('repaginate', function () {
	        $next.addClass('clickable');
	        $previous.addClass('clickable');
		        
	        setTimeout(function () {
	            var $active = $pager.find('.page-number.active');
	            if ($active.next('.page-number.clickable').length === 0) {
	                $next.removeClass('clickable');
	            } else if ($active.prev('.page-number.clickable').length === 0) {
	                $previous.removeClass('clickable');
	            }
	        });
	    });
	    $table.trigger('repaginate'); //show correct number of rows on first page load
	}

5. PAGINATION with SEARCHING
---- HTML
	<div class="search" >Search: <input type="text" id="txtEquipmentSearch"/></div>
	<table class="gridview" ID="tblEquipment">
		<thead>
			<tr class="header">
				<th></th>
				<th></th>
				<th></th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>Wade</td>
				<td>vitae.orci.Phasellus@Morbisit.org</td>
				<td>Kemmerer</td>
				<td>Benin</td>
			</tr>
		</tbody>

	</table>
---- CSS
	/* PAGING*/
	div.pager {
	float: left;
	margin-bottom: 10px;
	}

	div.pager span {
	    display: inline-block;
	    padding: 5px;
	    text-align: center;
	    cursor: pointer;
	    background: #E2E4FF;
	    color: #000;
	    margin-right: 0.5em;
	}

	div.pager span.active {
	    background: #1296bc;
	    color: #FFF
	}

	.insert_button {
	    padding: 5px;
	    cursor: pointer;
	    background: #E2E4FF;
	    color: #000;
	}

---- JQUERY
		
		$(document).ready(function () {
            $('#txtUserSearch').keyup(function () {
                searchTable($(this).val(), '#MainContent_lvUsers_tblUserList');
            });
            $('#txtUserItemSearch').keyup(function () {
                searchTable($(this).val(), '#tblUserItems');
            });
            $('#txtMicrosoftSearch').keyup(function () {
                searchTable($(this).val(), '#MainContent_ListView1_tblMicrosoft');
            });
            $('#txtEquipmentSearch').keyup(function () {
                searchTable($(this).val(), '#tblEquipment');
            });

            paginate();
        });

        function paginate() {
            $('table.gridview').each(function () {
                var currentPage = 0;
                var numPerPage = 20;
                var $table = $(this);
                $table.bind('repaginate', function () {
                    $table.children('tbody').children('tr:not(.exclude)').hide().slice(currentPage * numPerPage, (currentPage + 1) * numPerPage).show();
                });
                $table.trigger('repaginate');
                var numRows = $table.children('tbody').children('tr:not(.exclude)').length;

                var numPages = Math.ceil(numRows / numPerPage);
                var $pager = $('<div id="pager" class="pager"></div>');
                for (var page = 0; page < numPages; page++) {
                    $('<span class="page-number"></span>').text(page + 1).bind('click', {
                        newPage: page
                    }, function (event) {
                        currentPage = event.data['newPage'];
                        $table.trigger('repaginate');
                        $(this).addClass('active').siblings().removeClass('active');
                    }).appendTo($pager).addClass('clickable');
                }
                // Clear the old pager first
                $('#pager').remove();
                $pager.insertBefore($table).find('span.page-number:first').addClass('active');
            });
        }

        function searchTable(inputVal, tablename) {
            var table = $(tablename);
            table.find('tr:not(.header)').each(function (index, row) {
                var allCells = $(row).find('td');
                if (allCells.length > 0) {
                    var found = false;
                    allCells.each(function (index, td) {
                        var regExp = new RegExp(inputVal, 'i');
                        if (regExp.test($(td).text())) {
                            found = true;
                            return false;
                        }
                    });
                    if (found == true) $(row).show().removeClass('exclude'); else $(row).hide().addClass('exclude');
                }
            });
            paginate();
        }

6. Get URL parameters & values with jQuery
---- JQUERY
			// Read a page's GET URL variables and return them as an associative array.
			function getUrlVars()
			{
			    var vars = [], hash;
			    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
			    for(var i = 0; i < hashes.length; i++)
			    {
			        hash = hashes[i].split('=');
			        vars.push(hash[0]);
			        vars[hash[0]] = hash[1];
			    }
			    return vars;
			}

The function returns an array/object with your URL parameters and their values. For example, consider we have the following URL:

			http://www.example.com/?me=myValue&name2=SomeOtherValue

Calling getUrlVars() function would return you the following array:

			{
			    "me"    : "myValue",
			    "name2" : "SomeOtherValue"
			}

To get a value of first parameter you would do this:

			var first = getUrlVars()["me"];

			// To get the second parameter
			var second = getUrlVars()["name2"];